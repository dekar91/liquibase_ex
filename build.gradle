buildscript {
    ext.kotlin_version = '1.4.0'
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    // Documentation
    id 'org.asciidoctor.jvm.base' version '3.2.0'
    id 'org.asciidoctor.jvm.convert' version '3.2.0'

    id 'org.liquibase.gradle' version '2.0.4'
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'

    id "org.jetbrains.dokka" version "$dokkaPluginVersion"
    id "org.jetbrains.kotlin.jvm" version "${kotlinVersion}"
    id 'java'
}

group = 'ru.team42'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

repositories {
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }

    maven { url 'https://dl.bintray.com/kotlin/dokka' }
    maven { url 'https://jitpack.io' }

}

ext {
    // Documentation
    snippetsDir = file('build/generated-snippets')
    javadocJsonDir = file("$buildDir/generated-javadoc-json")
}

configurations {
    liquibaseRuntime.extendsFrom runtime

    compileOnly {
        extendsFrom annotationProcessor
    }

    Properties liquibaseProps = new Properties()
    liquibaseProps.load(new FileInputStream("src/main/resources/liquibase.properties"))

    Properties applicationProps = new Properties()
    applicationProps.load(new FileInputStream("src/main/resources/application.properties"))

    liquibase {


        activities {

            main {
                referenceUrl 'hibernate:spring:' + liquibaseProps.getProperty('liquibase.domain.package') + '?dialect=' + applicationProps.getProperty('spring.jpa.database-platform') + '&hibernate.physical_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy&hibernate.implicit_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy'
                driver applicationProps.getProperty('spring.datasource.driver-class-name')
                changeLogFile liquibaseProps.getProperty('liquibase.changelog.path') + migrationName() + '.yaml'
                url applicationProps.getProperty('spring.datasource.url')
                username applicationProps.getProperty('spring.datasource.username')
                password applicationProps.getProperty('spring.datasource.password')
            }
        }
    }
}

// Documentation
configurations {
    dokkaFatJar
}

dependencies {

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:2.11.+"

    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'


    // Migrations
    implementation 'org.liquibase:liquibase-core:4.0.0'
    liquibaseRuntime 'org.liquibase:liquibase-core:4.0.0'
    liquibaseRuntime 'org.liquibase:liquibase-groovy-dsl:2.1.2'
    liquibaseRuntime 'org.postgresql:postgresql'

    liquibaseRuntime 'org.liquibase.ext:liquibase-hibernate5:4.0.0'
    liquibaseRuntime sourceSets.main.output

    liquibaseRuntime "ch.qos.logback:logback-core"
    liquibaseRuntime "ch.qos.logback:logback-classic"
    liquibaseRuntime 'org.yaml:snakeyaml'
    liquibaseRuntime group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.1'

    liquibaseRuntime 'org.springframework.boot:spring-boot-starter-data-jpa'
    liquibaseRuntime 'org.springframework.boot:spring-boot-starter-security'
    liquibaseRuntime 'org.springframework.boot:spring-boot-starter-web'


    // Documentation
    implementation "io.springfox:springfox-boot-starter:3.0.0"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin"
    implementation "capital.scalable:spring-auto-restdocs-core:$springAutoRestDocsVersion"

    dokkaFatJar "org.jetbrains.dokka:dokka-gradle-plugin:0.9.16"
    dokkaFatJar "capital.scalable:spring-auto-restdocs-dokka-json:2.0.1"

    dokkaRuntime "capital.scalable:spring-auto-restdocs-dokka-json:$springAutoRestDocsVersion"
    dokkaRuntime "org.jetbrains.dokka:dokka-fatjar:0.10.1"

    testImplementation "org.springframework.restdocs:spring-restdocs-core:$springRestDocsVersion"
    testImplementation "org.springframework.restdocs:spring-restdocs-mockmvc:$springRestDocsVersion"


	// Tests
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testCompile 'org.springframework.restdocs:spring-restdocs-mockmvc:2.0.4.RELEASE'

}

compileKotlin {
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11
    }
}

test {
	systemProperty 'org.springframework.restdocs.outputDir', snippetsDir
}


asciidoctor {
    dependsOn dokka
    options doctype: 'book', backends: ['html5', 'pdf'], parallelMode: true

    attributes = [
            'source-highlighter': 'highlightjs',
            'imagesdir'         : './images',
            'toc'               : 'left',
            'toclevels'         : 3,
            'numbered'          : '',
            'icons'             : 'font',
            'setanchors'        : '',
            'idprefix'          : '',
            'idseparator'       : '-',
            'docinfo1'          : '',
            'safe-mode-unsafe'  : '',
            'allow-uri-read'    : '',
            'snippets'          : snippetsDir,
            linkattrs           : true,
            encoding            : 'utf-8'
    ]

    inputs.dir snippetsDir
    baseDir 'src/docs/asciidoc'
    outputDir "build/asciidoc"
    sourceDir 'src/docs/asciidoc'
    sources {
        include 'index.adoc'
    }
}

asciidoctor.doLast {
    copy {
        from file("$buildDir/generated-docs/html5")
        into file("$sourceSets.main.output.classesDirs/public")
        include "index.html"
    }
}


//task publishAsciidoc(type: Copy){
//    description 'Publish documentation'
//    dependsOn asciidoctor
//    from "${asciidoctor.outputDir}/"
//    into 'static/docs'
//
//}
//bootRun.dependsOn publishAsciidoc
//bootJar.dependsOn publishAsciidoc


task repackDokka(type: Jar) {
    zip64 true
    destinationDirectory = file("$buildDir/dokka-repack")
    from configurations.dokkaFatJar.collect { zipTree(it) }
}

configurations {
    dokkaFatJar
}

dokka {
    dependsOn repackDokka

    outputFormat = "auto-restdocs-json"
    outputDirectory = javadocJsonDir
    configuration {
        includeNonPublic = true
        reportUndocumented = false
    }
}

static String getVersionName() {
    try {
        def branchout = new ByteArrayOutputStream()
        commandLine 'git', 'rev-parse', '--abbrev-ref', 'HEAD'

        def branch = branchout.toString().trim()

        if (branch.equals("master")) {
            def stdout = new ByteArrayOutputStream()
            commandLine 'git', 'describe', '--tags'

            return stdout.toString().trim()
        } else {
            return branch
        }
    }
    catch (ignored) {
        return 'default'
    }
}

static String migrationName() {

    def date = new Date()
    def formattedDate = date.format('yyyyMMddHHmmss')
    return formattedDate + '_' + getVersionName()
}
