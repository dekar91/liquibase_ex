buildscript {
    ext.kotlin_version = '1.4.0'
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}
plugins {
	id "org.asciidoctor.convert" version "1.5.9.2"
	id 'org.liquibase.gradle' version '2.0.4'
	id 'org.springframework.boot' version '2.4.0-M1'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'java'
}

group = 'ru.team42'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '13'

asciidoctor {
	sourceDir  file('docs')
	sources {
		include 'toplevel.adoc', 'another.adoc', 'third.adoc'
	}
	outputDir  file('build/docs')
}

configurations {
	liquibaseRuntime.extendsFrom runtime

	compileOnly {
		extendsFrom annotationProcessor
	}

	Properties liquibaseProps = new Properties()
	liquibaseProps.load(new FileInputStream("src/main/resources/liquibase.properties"))

	Properties applicationProps = new Properties()
	applicationProps.load(new FileInputStream("src/main/resources/application.properties"))

	liquibase {


		activities {

			main {
				referenceUrl 'hibernate:spring:'+ liquibaseProps.getProperty('liquibase.domain.package') +'?dialect='+applicationProps.getProperty('spring.jpa.database-platform')+'&hibernate.physical_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy&hibernate.implicit_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy'
				driver applicationProps.getProperty('spring.datasource.driver-class-name')
				changeLogFile liquibaseProps.getProperty('liquibase.changelog.path') + migrationName() + '.yaml'
				url applicationProps.getProperty('spring.datasource.url')
				username applicationProps.getProperty('spring.datasource.username')
				password applicationProps.getProperty('spring.datasource.password')
			}
		}
	}
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
	maven { url 'https://repo.spring.io/snapshot' }
}

ext {
	set('springCloudVersion', "2020.0.0-SNAPSHOT")
}

apply plugin: "org.liquibase.gradle"
apply plugin: 'kotlin'


dependencies {

	liquibaseRuntime 'org.liquibase:liquibase-core:4.0.0'
	liquibaseRuntime 'org.liquibase:liquibase-groovy-dsl:2.1.2'
	liquibaseRuntime 'org.postgresql:postgresql'

	liquibaseRuntime 'org.liquibase.ext:liquibase-hibernate5:4.0.0'
	liquibaseRuntime sourceSets.main.output

	liquibaseRuntime "ch.qos.logback:logback-core"
	liquibaseRuntime "ch.qos.logback:logback-classic"
	liquibaseRuntime 'org.yaml:snakeyaml'
	liquibaseRuntime group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.1'
	liquibaseRuntime 'org.springframework.boot:spring-boot-starter-data-jpa'
	liquibaseRuntime 'org.springframework.boot:spring-boot-starter-security'
	liquibaseRuntime 'org.springframework.boot:spring-boot-starter-web'

	implementation "com.fasterxml.jackson.module:jackson-module-kotlin:2.11.+"


	// Documentation
	implementation "io.springfox:springfox-boot-starter:3.0.0"
	asciidoctor 'org.springframework.restdocs:spring-restdocs-asciidoctor:2.0.5'

	implementation 'org.liquibase:liquibase-core:4.0.0'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

	implementation 'org.springframework.boot:spring-boot-starter-security'
	testImplementation 'io.projectreactor:reactor-test'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
//	implementation 'org.springframework.boot:spring-boot-starter-actuator'


	// Tests
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testCompile 'org.springframework.restdocs:spring-restdocs-mockmvc:2.0.4.RELEASE'

}

ext {
	snippetsDir = file('build/generated-snippets')
}

test {
	systemProperty 'org.springframework.restdocs.outputDir', snippetsDir
}

test {
	outputs.dir snippetsDir
}

asciidoctor {
	inputs.dir snippetsDir
	dependsOn test
}

static String getVersionName() {
	try {
		def branchout = new ByteArrayOutputStream()
		commandLine 'git', 'rev-parse', '--abbrev-ref', 'HEAD'

		def branch = branchout.toString().trim()

		if (branch.equals("master")) {
			def stdout = new ByteArrayOutputStream()
			commandLine 'git', 'describe', '--tags'

			return stdout.toString().trim()
		} else {
			return branch;
		}
	}
	catch (ignored) {
		return 'default';
	}
}

static String migrationName() {

	def date = new Date()
	def formattedDate = date.format('yyyyMMddHHmmss')
	return formattedDate + '_' +  getVersionName()
}

test {
	useJUnitPlatform()
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
